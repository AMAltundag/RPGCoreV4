package me.blutkrone.rpgcore.hud.editor.bundle.passive;

import me.blutkrone.rpgcore.hud.editor.annotation.EditorTooltip;
import me.blutkrone.rpgcore.hud.editor.annotation.value.EditorList;
import me.blutkrone.rpgcore.hud.editor.constraint.other.StringConstraint;
import me.blutkrone.rpgcore.passive.node.AbstractCorePassive;
import me.blutkrone.rpgcore.passive.node.CorePassiveSocketSkillReference;
import me.blutkrone.rpgcore.util.ItemBuilder;
import org.bukkit.Material;
import org.bukkit.inventory.ItemStack;

import java.util.ArrayList;
import java.util.List;

public class EditorPassiveSocketSkillReference extends AbstractEditorPassive {

    @EditorList(name = "Tags", constraint = StringConstraint.class)
    @EditorTooltip(tooltip = {"The skill, NOT the item, must have one of these tags."})
    public List<String> tags = new ArrayList<>();

    @Override
    public AbstractCorePassive build() {
        return new CorePassiveSocketSkillReference(this);
    }

    @Override
    public ItemStack getPreview() {
        return ItemBuilder.of(Material.EXPERIENCE_BOTTLE)
                .name("§fSkill Passive")
                .lore("§fTags: " + this.tags)
                .build();
    }

    @Override
    public String getName() {
        return "Skill";
    }

    @Override
    public List<String> getInstruction() {
        List<String> instruction = new ArrayList<>();
        instruction.add("Skill Passive");
        instruction.add("");
        instruction.add("Socket item must be generated by a skill, this allows for");
        instruction.add("The trigger mechanic to invoke one of these skills.");
        instruction.add("");
        instruction.add("This will only affect the skill the tree belongs to.");
        instruction.add("");
        instruction.add("§cCompatible: Skill");
        return instruction;
    }
}